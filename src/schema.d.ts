/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/colecao": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Listar Coleção
         * @description <div class="operation"><span class="get">GET</span> /colecao</div>
         *
         *     Retorna a lista de jogos da Coleção do usuário. Através desse método pode ser retornado
         *
         *     ```colecao``` Retorna os jogos da coleção do usuário
         *
         *     ```lista_desejos``` Retona a lista de desejos
         *
         *     ```favoritos``` Retorna os jogos favoritos
         *
         *     ```teve``` Retonar os jogos que o usuário já teve
         *
         *     ```notas``` Retonar os jogos que o usuário já deu nota
         *
         *     ```comentários``` Retonar os jogos que o usuário já preencheu um comentário
         *
         */
        get: {
            parameters: {
                query: {
                    /** @description Indica qual lista da coleção do usuário irá buscar */
                    lista: "colecao" | "favoritos" | "teve" | "lista_desejos" | "comentados" | "notas" | "jogados";
                    /** @description Realiza uma busca na coleção atual pelo nome do jogo */
                    search?: string;
                    /** @description Ordenação dos resultado por Nome do jogo, Ranking, Nota do Usuário ou Quantidade de Partidas registradas.  Por padrão, vem ordenado por nome do jogo. */
                    ordem?: "nome" | "rank" | "nota" | "partidas";
                    /** @description Filtra o resultado pelo tipo de jogo. ```t``` = todos, ```b``` = jogo base, ```e``` = expansão */
                    tp_jogo?: "t" | "b" | "e";
                    /** @description Filtra o resultado para jogos que aceitem essa quantidade de jogadores. */
                    qt_jogadores?: number;
                    /** @description Pagina atual */
                    page?: number;
                    /** @description Quantidade de Registros a retornar (máximo 100) */
                    rows?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Lista de Jogos */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "aplication-json": components["schemas"]["inline_response_200"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Inserir/Alterar na Coleção
         * @description <div class="operation"><span class="post">POST</span> /colecao</div>
         *     Para inserir ou alterar dados da relação de um jogo/usuário, é necessário fazer um <b>POST </b> com o objeto <code>JogoUsuario</code><br><br>
         *     Antes de realizar o <b>POST</b> você deve realizar o um <b>GET</b> do Objeto através do endpoint <code>colecao/item/{id_jogo}</code> para trazer os dados atualizados e alterar o que deseja.<br><br>
         *     Você pode adicionar um jogo na Coleção alterando a Flag dele de 0 para 1 no objeto JogoUsuario : <br><br>
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: components["requestBodies"]["JogoUsuarioBody"];
            responses: {
                /** @description Jogo Usuario Atualizado */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "aplication-json": components["schemas"]["JogoUsuario"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/colecao/item/{id_jogo}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Usuário Jogo
         * @description <div class="operation"><span class="get">GET</span> /colecao/item/{<span class="param">id_jogo</span>}</div>
         *     Retorna a relação do usuário com o jogo (Nota, Comentario, coleção, etc)
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id_jogo: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Jogo */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "aplication-json": components["schemas"]["JogoUsuario"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/colecao/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Tags do usuário
         * @description <div class="operation"><span class="get">GET</span> /colecao/tags</div>
         *     Listar Tags do usuário
         *
         */
        get: {
            parameters: {
                query?: {
                    /** @description Pagina atual */
                    page?: number;
                    /** @description Quantidade de Registros a retornar (máximo 100) */
                    rows?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Lista de tags */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "aplication-json": components["schemas"]["inline_response_200_1"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Inserir/Atualizar Tag
         * @description <div class="operation"><span class="post">POST</span> /colecao/tags</div>
         *     Permite a criação de uma nova tag, ou a atualização de uma tag Existente.
         *     Para a criação de uma tag, pode-se passar o id_usuario_tag com valor <b>0</b>
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: components["requestBodies"]["UsuarioTagBody"];
            responses: {
                /** @description Objeto UsuarioTag */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "aplication-json": components["schemas"]["inline_response_200_2"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/colecao/tags/{id_usuario_tag}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Deletar Tag
         * @description <div class="operation"><span class="delete">DELETE</span> /colecao/tags/{<span class="param">id_usuario_tag</span>}</div>
         *     Deletar Tag de Usuário a partir do id_usuario_tag
         *
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id_usuario_tag: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Retorna Null se o objeto foi deletado */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/colecao/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Contabilizar Coleção
         * @description <div class="operation"><span class="get">GET</span> /colecao/count</div>
         *     Contabilizar Coleção
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Listas e Quantidades */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "aplication-json": components["schemas"]["inline_response_200_3"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/colecao/group": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Agrupar Coleção
         * @description <div class="operation"><span class="get">GET</span> /colecao/group</div>
         *     Retorna os itens da coleção do usuário agrupados. É possível trazer multiplos agrupamentos em uma única chamada, separando os agrupamentos por | no parametro ``groupby``
         *
         *     Agrupamentos possíveis :
         *
         *      ```tags``` Retorna a quantidade de jogos agrupados pelas Tags do usuário
         *
         *     ```jogadores``` Retorna a quantidade de jogos agrupados pelo número de jogadores possíveis cadastrada na ficha do jogo
         *
         *     ```mecanicas``` Retorna a quantidade de jogos agrupadas pelas Mecânicas do jogo
         *
         *     ```temas``` Retorna a quantidade de jogos agrupadas pelos Temas do jogo
         *
         */
        get: {
            parameters: {
                query: {
                    /** @description Indica qual lista da coleção do usuário irá buscar */
                    lista: "colecao" | "favoritos" | "teve" | "lista_desejos" | "comentados" | "notas" | "jogados";
                    /** @description Agrupamentos desejados, separados por | */
                    groupby: string;
                    /** @description Pagina atual */
                    page?: number;
                    /** @description Quantidade de Registros a retornar (máximo 100) */
                    rows?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Retorna um Objeto com os arrays dos grupos solicitados.
                 *
                 *       Exemplo : groupby=temas|mecanicas
                 *
                 *       Retorno : <code>
                 *                 {
                 *                   temas:[],
                 *                   mecanicas:[]
                 *                 }
                 *                 </code>
                 *      */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "aplication-json": Record<string, never>;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jogos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Listar Jogos
         * @description <div class="operation "><span class="get">GET</span> /jogos</div>
         *     Retorna uma lista de jogos, de acordo com os parametros passados.
         *
         */
        get: {
            parameters: {
                query?: {
                    /** @description Pesquisa pelo nome do jogo */
                    search?: string;
                    /** @description Filtra o resultado pelo tipo de jogo. ``` ``` = todos, ```b``` = jogo base, ```e``` = expansão */
                    tp_jogo?: "" | "b" | "e";
                    /** @description Indica para trazer apenas jogos que sejam <b>expansão</b> do jogo base indicado por id_jogo_base */
                    id_jogo_base?: number;
                    /** @description Pagina atual */
                    page?: number;
                    /** @description Quantidade de Registros a retornar (máximo 100) */
                    rows?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Lista de Jogos */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "aplication-json": components["schemas"]["inline_response_200_4"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jogos/{id_jogo}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Detalhes de um jogo
         * @description <div class="operation"><span class="get">GET</span> /jogos/{<span class="param">id_jogo</span>}</div>
         *     Retorna os detalhes da Ficha do jogo
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id_jogo: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Jogo */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "aplication-json": components["schemas"]["Jogo"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jogos/{id_jogo}/notas": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Comentários e notas (não implementado)
         * @description <div class="operation"><span class="get">GET</span> /jogos{<span class="param">id_jogo</span>}/notas</div>
         *     Retorna os Comentários e notas de um jogo
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id do jogo */
                    id_jogo: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Notas */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application-json": components["schemas"]["inline_response_200_5"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jogos/{id_jogo}/videos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retorna a lista de videos de um jogo (não implementado)
         * @description <div class="operation"><span class="get">GET</span> /jogos{<span class="param">id_jogo</span>}/videos</div>
         *     Retorna a lista de videos de um jogo (não implementado)
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id do jogo */
                    id_jogo: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Vídeos */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application-json": components["schemas"]["inline_response_200_5"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jogos/{id_jogo}/imagens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retorna a lista de Imagens de um jogo (Não implementado)
         * @description <div class="operation"><span class="get">GET</span> /jogos{<span class="param">id_jogo</span>}/imagens</div>
         *     Retorna a lista de Imagens de um jogo (não implementado)
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id do jogo */
                    id_jogo: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Imagens */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application-json": components["schemas"]["inline_response_200_5"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jogos/{id_jogo}/aquivos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retorna a lista de Arquivos de um jogo (Não Implementado)
         * @description <div class="operation"><span class="get">GET</span> /jogos{<span class="param">id_jogo</span>}/arquivos</div>
         *     Retorna a lista de arquivos de um jogo (não implementado)
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id do jogo */
                    id_jogo: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Arquivos */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application-json": components["schemas"]["inline_response_200_5"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Dados do usuário Logado
         * @description <div class="operation"><span class="get">GET</span> /me</div>
         *     Retorna dados do usuário Logado
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Dados do usuário Logado */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application-json": components["schemas"]["inline_response_200_6"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/usuarios": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Listar Usuários
         * @description <div class="operation"><span class="get">GET</span> /usuarios</div>
         *     Retorna uma lista de usuários, baseado nos parametros de Pesquisa
         *
         */
        get: {
            parameters: {
                query?: {
                    /** @description String para pesquisa de usuários */
                    search?: string;
                    /** @description Pagina atual da pesquisa */
                    page?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Lista de Usuários */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "aplication-json": components["schemas"]["Usuario"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/partidas": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Listar Partidas
         * @description <div class="operation"><span class="get">GET</span> /partidas</div>
         *     Retorna a lista de Partidas do usuário
         *
         */
        get: {
            parameters: {
                query?: {
                    /** @description Busca Partidas com data igual ou superior a dt_ini informada no formato <b>yyyy-mm-dd</b> */
                    dt_ini?: string;
                    /** @description Busca Partidas com data inferior a dt_fim informada no formato <b>yyyy-mm-dd</b> */
                    dt_fim?: string;
                    /** @description Busca Partidas que tenham o jogo(id_jogo) */
                    id_jogo?: number;
                    /** @description Busca Partidas que o usuário (id_usuario) tenha participado */
                    id_usuario_jogador?: number;
                    /** @description Busca Partidas que o jogador não registrado (sem id_usuario) tenha participado */
                    jogador?: string;
                    /** @description Dia da semana (1 Domingo a 7 Sabado) */
                    weekday?: 1 | 2 | 3 | 4 | 5 | 6 | 7;
                    /** @description Pagina atual */
                    page?: number;
                    /** @description Quantidade de Registros a retornar (máximo 100) */
                    rows?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Lista de Partidas do usuário */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "aplication-json": components["schemas"]["inline_response_200_7"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Inserir/Alterar Partida
         * @description <div class="operation"><span class="post">POST</span> /partidas</div>
         *     Cadastra ou altera uma partida. Para cadastrar o objeto deve ter o id_partida = 0 . Para fazer update, deve-se passar o id_partida e a partida deve ter sido criada pelo próprio usuário.
         *     O usuário deve fazer parte do array <code>Jogadores</code>. O <code>id_usuario</code> do usuário logado pode ser obtido através do método <code>/me</code>
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: components["requestBodies"]["PartidaBody"];
            responses: {
                /** @description Partida */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/partidas/{id_partida}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retornar Dados de uma Partida
         * @description <div class="operation"><span class="get">GET</span> /partidas/{<span class="param">id_partida</span>}</div>
         *     Retorna detalhes da Partida
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id_partida: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Partida */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "aplication-json": components["schemas"]["Partida"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Deletar Partida
         * @description <div class="operation"><span class="delete">DELETE</span> /partidas/{<span class="param">id_partida</span>}</div>
         *     Deletar a partida. Apenas usuário que registrou a partida tem permissão de exclui-la
         *
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id_partida: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Retorna Null se o objeto foi deletado */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/partidas/group": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Agrupar Partidas
         * @description <div class="operation"><span class="get">GET</span> /partidas/group</div>
         *     Retorna as partidas agrupadas. É possível trazer multiplos agrupamentos em uma única chamada, separando os agrupamentos por | no parametro ``groupby``
         *
         *     Agrupamentos possíveis :
         *
         *      ```jogos``` Retorna partidas agrupadas por jogo<br>
         *     ```jogadores``` Retorna partidas agrupadas por jogadores<br>
         *     ```qt_jogadores``` Retorna partidas agrupadas por qtde de jogadores<br>
         *     ```expansoes``` Retorna partidas agrupadas por expansão<br>
         *     ```diasemana``` Retorna partidas agrupadas por dia da semana<br>
         *     ```grupos``` Retorna partidas agrupas por Grupo de Usuários<br>
         *
         */
        get: {
            parameters: {
                query: {
                    /** @description Agrupamentos desejados, separados por | */
                    groupby: string;
                    /** @description Busca Partidas com data igual ou superior a dt_ini informada no formato <b>yyyy-mm-dd</b> */
                    dt_ini?: string;
                    /** @description Busca Partidas com data inferior a dt_fim informada no formato <b>yyyy-mm-dd</b> */
                    dt_fim?: string;
                    /** @description Busca Partidas que tenham o jogo(id_jogo) */
                    id_jogo?: number;
                    /** @description Busca Partidas que o usuário (id_usuario) tenha participado */
                    id_usuario_jogador?: number;
                    /** @description Busca Partidas que o jogador não registrado (sem id_usuario) tenha participado */
                    jogador?: string;
                    /** @description Dia da semana (1 Domingo a 7 Sabado) */
                    weekday?: 1 | 2 | 3 | 4 | 5 | 6 | 7;
                    order?: "qtde" | "dt_ultima_partida" | "duracao";
                    /** @description Pagina atual */
                    page?: number;
                    /** @description Quantidade de Registros a retornar (máximo 100) */
                    rows?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Retorna um Objeto com os arrays dos grupos solicitados.
                 *
                 *       Exemplo : groupby=temas|mecanicas
                 *
                 *       Retorno : {jogos:[], jogadores:[]}
                 *      */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "aplication-json": Record<string, never>;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/partidas/resumo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Resumo de Partidas
         * @description <div class="operation"><span class="get">GET</span> /partidas/resumo</div>
         *     Retorna um resumo das partidas do usuário
         *
         */
        get: {
            parameters: {
                query?: {
                    /** @description Busca Partidas com data igual ou superior a dt_ini informada no formato <b>yyyy-mm-dd</b> */
                    dt_ini?: string;
                    /** @description Busca Partidas com data inferior a dt_fim informada no formato <b>yyyy-mm-dd</b> */
                    dt_fim?: string;
                    /** @description Busca Partidas que tenham o jogo(id_jogo) */
                    id_jogo?: number;
                    /** @description Busca Partidas que o usuário (id_usuario) tenha participado */
                    id_usuario_jogador?: number;
                    /** @description Busca Partidas que o jogador não registrado (sem id_usuario) tenha participado */
                    jogador?: string;
                    /** @description Dia da semana (1 Domingo a 7 Sabado) */
                    weekday?: 1 | 2 | 3 | 4 | 5 | 6 | 7;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Resumo das partidas
                 *      */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application-json": components["schemas"]["inline_response_200_8"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extra/generateimage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Imagem com Capas
         * @description <div class="operation"><span class="get">GET</span> /extra/generateimage</div>
         *     Gera uma imagem com capas dos jogos passados.
         *     Caso sejam passadas mais de 9 imagens, apenas as 9 primeiras serão consideradas.
         *     O formato da imagem é baseado no número de jogos passados.: <br>
         *     1 jogo (1x3)<br>
         *     2 jogos (1x3)<br>
         *     <b>3 jogos (1x3)</b><br>
         *     <b>4 jogos (2x2)</b><br>
         *     5 jogos (2x3)<br>
         *     <b>6 jogos (2x3)</b><br>
         *     7 jogos (3x3)<br>
         *     8 jogos (3x3)<br>
         *     <b>9 jogos (3x3)</b><br>
         *     Exemplo:
         *     <img src="top_nine.jpg" class="top-nine">
         *
         */
        get: {
            parameters: {
                query: {
                    jogos: string;
                    cropy_cover?: boolean;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Jogo */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "aplication-json": components["schemas"]["inline_response_200_9"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Jogo: {
            /** @example 404 */
            id_jogo: number;
            /** @example Terra Mystica */
            nm_jogo?: string;
            /** @example https://storage.googleapis.com/ludopedia-capas/404_t.jpg */
            thumb?: string;
            /**
             * @example b
             * @enum {string}
             */
            tp_jogo?: "b" | "e";
            /** @example https:ludopedia.com.br/jogo/terra-mystica */
            link?: string;
            /** @example 2012 */
            ano_publicacao?: number;
            /** @example 2016 */
            ano_nacional?: number;
            /** @example 2 */
            qt_jogadores_min?: number;
            /** @example 5 */
            qt_jogadores_max?: number;
            /** @example 100 */
            vl_tempo_jogo?: number;
            /** @example 12 */
            idade_minima?: number;
            /** @example 1500 */
            qt_tem?: number;
            /** @example 1500 */
            qt_teve?: number;
            /** @example 400 */
            qt_favorito?: number;
            /** @example 1300 */
            qt_quer?: number;
            /** @example 707 */
            qt_jogou?: number;
            mecanicas?: components["schemas"]["Jogo_mecanicas"][];
            categorias?: components["schemas"]["Jogo_categorias"][];
            temas?: components["schemas"]["Jogo_temas"][];
            artistas?: components["schemas"]["Jogo_artistas"][];
            designers?: components["schemas"]["Jogo_artistas"][];
        };
        Grupo: {
            /** @example 1 */
            id_grupo_jogo: number;
            /** @example Meu Grupo */
            nm_grupo?: string;
        };
        UsuarioTag: {
            id_usuario_tag: number;
            nm_tag: string;
        };
        JogoUsuario: {
            readonly id_usuario_jogo?: number;
            /** @description Identifador do Jogo */
            id_jogo: number;
            readonly nm_jogo?: string;
            readonly thumb?: string;
            readonly link?: string;
            readonly id_usuario?: number;
            /** @description Flag que indica se o jogo está na Coleção do usuário (tenho) */
            fl_tem?: number;
            /** @description Flag que indica se o jogo está na Lista de Desejos do usuário (quer) */
            fl_quer?: number;
            /** @description Flag que indica se o usuário já teve esse jogo (teve) */
            fl_teve?: number;
            /** @description Flag que indica se o usuário já jogou esse jogo (jogou) */
            fl_jogou?: number;
            /** @description Comentário realizado pelo usuário sobre o jogo */
            comentario?: string;
            /** @description Comentário Privado realizado pelo usuário */
            comentario_privado?: string;
            /** @description Nota dada pelo usuário para o Jogo */
            vl_nota?: number;
            /** @description Quantidade partidas registradas no site */
            readonly qt_partidas?: number;
            /** @description Valor pago pelo usuário pelo jogo */
            vl_custo?: number;
            /** @description Array com Tags do usuário para esse Jogo. Adicione ou remova um objeto ao array para "Marcar" ou "Desmarcar" a Tag. Passar esse array vazio no post irá apagar todas as tags relacionadas a esse jogo. */
            tags?: components["schemas"]["JogoUsuario_tags"][];
        };
        Partida: {
            /**
             * @description Id da partida. Para cadastrar uma nova, deve vir 0.
             * @example 0
             */
            id_partida: number;
            /**
             * @description Qtde de partidas. Geralmente é cadastrado como 1 , mas caso o usuário queira registrar + de 1 partida do mesmo jogo em um unico registro, pode utilizar esse campo.
             * @default 1
             * @example 1
             */
            qt_partidas: number;
            /**
             * @description Flag que indica se a partida foi realizada em alguma plataforma digital(1)
             * @example 0
             */
            fl_digital?: number;
            /** @description Duração da partida, em minutos */
            duracao: number | null;
            /**
             * @description Data da Partida no formato yyyy-mm-dd
             * @example 2013-06-01
             */
            dt_partida: string;
            /** @description Observações do usuário sobre a partida */
            descricao: string | null;
            grupo?: components["schemas"]["Grupo"];
            jogo: components["schemas"]["JogoResumo"];
            /** @description Expansões do jogo utilizadas nessa partida. É obrigatório apenas o id_jogo da expansão para cadastro. */
            expansoes: components["schemas"]["JogoResumo"][];
            /** @description Jogadores que participaram da partida. É necessário pelo menos 1 jogador no array. */
            jogadores: components["schemas"]["Jogador"][];
            usuario: components["schemas"]["Usuario"];
        };
        Jogador: {
            /**
             * @description Identificador do jogador na partida. Para inclusão de um novo jogador, o valor deve vir 0.
             * @example 1
             */
            id_partida_jogador: number;
            /**
             * @description Nome do jogador que não seja usuário do site. Para jogador que seja usuário do site, deve-se preenhcer o campo id_usuario.
             * @example Vegeta
             */
            nome: string;
            /**
             * @description Id do usuário no site. Caso esteja nulo, indica que é um Jogador que não tem cadastro e deve ser preenchido o campo nome.
             * @example 1
             */
            id_usuario: number | null;
            /**
             * @description Flag que indica se esse jogador foi o ganhador da partida. 0 false 1 true
             *
             * @example 1
             */
            fl_vencedor: number;
            /** @example 25 */
            vl_pontos: number | null;
            /** @description Descrição sobre o jogador na partida (Raça escolhida, cor, estratégia, etc) */
            observacao: string | null;
            /** @description Thumbnail do jogador no site. */
            readonly thumb?: string;
        };
        JogoResumo: {
            /**
             * @description Identificador do Jogo
             * @example 397
             */
            id_jogo?: number;
            /**
             * @description Nome do Jogo
             * @example Catan o Jogo
             */
            readonly nm_jogo?: string;
            /**
             * @description Nome Original do jogo
             * @example The Settlers of Catan
             */
            readonly nm_original?: string;
            /**
             * @description Url da Thumbnail da capa do jogo (150x150)
             * @example https://storage.googleapis.com/ludopedia-capas/397_t.jpg
             */
            readonly thumb?: string;
            /** @example https://www.ludopedia.com.br/jogo/the-settlers-of-catan */
            readonly link?: string;
        };
        NotaJogo: {
            /** @example 10 */
            vl_nota?: number;
            /** @example Jogo muito bom */
            comentario?: string;
        };
        Usuario: {
            /**
             * @description Id do usuário
             * @example 1
             */
            id_usuario?: number;
            /**
             * @description Nome do usuário
             * @example Vegeta
             */
            usuario?: string;
            /**
             * @description Url para Thumb do perfil do usuário
             * @example https://www.ludopedia.com.br/uploads/avatar/avatar_1_1605894422.jpg
             */
            thumb?: string;
        };
        inline_response_200: {
            colecao?: components["schemas"]["JogoUsuario"][];
            /** @description Total de jogos BASE da coleção */
            qt_base?: number;
            /** @description Total de EXPANSÕES de jogo na coleção */
            qt_exp?: number;
            /** @description Total de Registros */
            total?: number;
        };
        inline_response_200_1: {
            tags?: components["schemas"]["UsuarioTag"][];
            /** @description Total de Registros */
            total?: number;
        };
        inline_response_200_2: {
            colecao?: components["schemas"]["UsuarioTag"][];
            total?: number;
        };
        inline_response_200_3: {
            /** @example colecao */
            lista?: string;
            /** @example 42 */
            qtde?: number;
        };
        inline_response_200_4: {
            jogos?: components["schemas"]["JogoResumo"][];
            /** @description Total de Registros */
            total?: number;
        };
        inline_response_200_5: {
            notas?: components["schemas"]["NotaJogo"][];
        };
        inline_response_200_6: {
            /**
             * @description Id do usuário
             * @example 1
             */
            id_usuario?: number;
            /**
             * @description Nome do usuário
             * @example Vegeta
             */
            usuario?: string;
            /**
             * @description Url para Thumb do perfil do usuário
             * @example https://www.ludopedia.com.br/uploads/avatar/avatar_1_1605894422.jpg
             */
            thumb?: string;
        };
        inline_response_200_7: {
            partidas?: components["schemas"]["Partida"][];
            /** @description Total de Registros */
            total?: number;
        };
        inline_response_200_8: {
            /**
             * @description Quantidade de partidas
             * @example 10
             */
            qt_partidas?: number;
            /**
             * @description Duracao registrada das partidas, em minutos
             * @example 120
             */
            vl_duracao?: number;
            /**
             * @description Quantidade de Partidas que possuem duracao cadastrada
             * @example 2
             */
            qt_duracao?: number;
            /**
             * @description Quantidade de Jogos Únicos usados em partidas
             * @example 5
             */
            qt_jogos?: number;
            /**
             * @description Quantidade de Expansões Únicas usadas em partidas
             * @example 2
             */
            qt_expansoes?: number;
            /**
             * @description Quantidade de Partidas que o usuário venceu
             * @example 5
             */
            qt_vitorias?: number;
            /**
             * @description Quantidade de Usuários do site registrados nas partidas (o próprio usuário também consta na quantidade)
             * @example 2
             */
            qt_usuarios?: number;
            /**
             * @description Quantidade de Jogadores únicos não registrados no site
             * @example 3
             */
            qt_nao_usuarios?: number;
        };
        inline_response_200_9: {
            /**
             * @description Altura da imagem gerada
             * @example 1080
             */
            height?: number;
            /**
             * @description Largura da imagem gerada
             * @example 1080
             */
            width?: number;
            /** @description Imagem PNG em string Base 64 */
            imagem?: string;
        };
        Jogo_mecanicas: {
            id_mecanica?: number;
            nm_mecanica?: string;
        };
        Jogo_categorias: {
            id_categoria?: number;
            nm_categoria?: string;
        };
        Jogo_temas: {
            id_tema?: number;
            nm_tema?: string;
        };
        Jogo_artistas: {
            id_profissional?: number;
            nm_profissional?: string;
        };
        JogoUsuario_tags: {
            id_usuario_tag?: number;
            readonly nm_tag?: string;
        };
    };
    responses: never;
    parameters: {
        /** @description Pagina atual */
        pageParam: number;
        /** @description Quantidade de Registros a retornar (máximo 100) */
        rowsParam: number;
        /** @description Id do jogo */
        idJogoParam: number;
    };
    requestBodies: {
        /** @description Objeto de Tag do Usuario */
        UsuarioTagBody: {
            content: {
                "application/json": components["schemas"]["UsuarioTag"];
            };
        };
        /** @description Objeto Jogo Usuario */
        JogoUsuarioBody: {
            content: {
                "application/json": components["schemas"]["JogoUsuario"];
            };
        };
        /** @description Objeto Partida */
        PartidaBody: {
            content: {
                "application/json": components["schemas"]["Partida"];
            };
        };
        /** @description Login de usuario */
        JogoBody: {
            content: {
                "application/json": components["schemas"]["Jogo"];
            };
        };
    };
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
